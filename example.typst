#import "abaisero.typ": *

#set page(numbering: "1")
#set heading(numbering: "1")
#show heading.where(level: 2): it => it.body

#set table(
  stroke: 0pt,
  align: left,
  columns: (1fr, 1fr, 2fr, 2fr),
)

#let commandstable(content) = align(center, table(
  ..("Symbol", "Command", "Description", "Example").map(name => [*#name*]),
  ..content,
))

#let sections = (
  (
    name: "Math",
    commands: (
      $naturalset$, "naturalset", "the set of natural numbers", $naturalset := {0, 1, 2, 3, ...}$,
      $integerset$, "integerset", "the set of integer numbers", $integerset := {0, 1, -1, 2, -2, ...}$,
      $realset$, "realset", "the set of real numbers", $sqrt(2) in realset$,
      $kstar$, "kstar", "the Kleene star operator", $cal(X) kstar := union_(k=0)^oo cal(X)^k$,
      $kplus$, "kplus", "the Kleene plus operator", $cal(X) kplus := union_(k=1)^oo cal(X)^k$,
      $softmax$, "softmax", "", "",
      $softmin$, "softmin", "", "",
      $sign$, "sign", "", $x = sign(x) dot.c abs(x)$,
    ),
  ),
  (
    name: "Linalg",
    commands: (
      $diag$, "diag", "", "",
      $rank$, "rank", "", "",
      $trace$, "trace", "", $trace(M) := sum_(i=1)^n M_(i i)$,
      $colspace$, "colspace", "", "",
      $nullspace$, "nullspace", "Nullspace (a.k.a. kernel) of a linear mapping", "",
      $spanspace$, "spanspace", "", "",
      $tr$, "tr", "Transpose", $"symmetric" M ==> M = M tr$,
      $inv$, "inv", "Inverse", $"invertible" M ==> M M inv = I$,
      $pinv$, "pinv", "Pseudo-inverse", $M M pinv M = M$,
      $it$, "it", "Inverse transpose", $M it = (M inv) tr = (M tr) inv$,
      $pit$, "pit", "Pseudo-inverse transpose", $M pit = (M pinv) tr = (M tr) pinv$,
    ),
  ),
  (
    name: "Optim",
    commands: (
      $argmax$, "argmax", "", $argmax_a qpolicy(s, a)$,
      $argmin$, "argmin", "", $theta opt := argmin_theta loss(theta)$,
      $opt$, "opt", "Optimality superscript", $policy opt(s) = argmax_a Q opt(s, a)$,
    ),
  ),
  (
    name: "Stats",
    commands: (
      $Cov$, "Cov", "Covariance", $Cov(x, y) = Exp[x y] - Exp[x] Exp[y]$,
      $Ent$, "Ent", "Entropy", $Ent[x] = - Exp[log Pr(x)]$,
      $Exp$, "Exp", "Expectation", $Exp[f(x)] = sum_x Pr(x) f(x)$,
      $Ind$, "Ind", "Indicator function", $Pr(x = 0) = Exp[Ind[ x = 0]]$,
      $KL$, "KL", "KL-divergence", $KL( p || q ) := Exp_(x~p)[ log (p(x) / q(x)) ]$,
      $DKL$, "DKL", "KL-divergence (alternative)", "",
      $MI$, "MI", "Mutual Information", "",
      $Var$, "Var", "Variance", $Var[x] = Exp[ x^2 ] - Exp[ x ]^2$,
    ),
  ),
  (
    name: "Dists",
    commands: (
      $Categorical$, "Categorical", "", "",
      $Dirichlet$, "Dirichlet", "", "",
      $Normal$, "Normal", "", "",
      $Uniform$, "Uniform", "", "",
    ),
  ),
  (
    name: "ML",
    commands: (
      $data$, "data", "Data set", $data := { (x_i, y_i) }_(i=1)^N$,
      $loss$, "loss", "Loss function", $loss(theta\; x, y) = 1 / 2 || y - f(x\; theta)||^2$,
      $nll$, "nll", "Neg-log-likelihood", $nll(x) := -log Pr(x)$,
      $mse$, "mse", "Mean-squared-error", "",
    ),
  ),
  (
    name: "RL",
    commands: (
      aset, "aset", "Action set", "",
      bset, "bset", "Belief set", $bset subset.eq Delta sset$,
      hset, "hset", "History set", $hset := (aset times oset) kstar$,
      oset, "oset", "Observation set", "",
      rset, "rset", "Reward set", $rset subset.eq RR$,
      sset, "sset", "State set", "",
      nohistory, "nohistory", "Empty history", "",
      policy, "policy", "Policy", $policy: hset -> Delta aset$,
      qpolicy, "qpolicy", "Policy Q function", $qpolicy: hset times aset -> RR$,
      qmodel, "qmodel", "Parametric Q model", $qmodel(h, a\; theta)$,
      vpolicy, "vpolicy", "Policy V function", $vpolicy: hset -> RR$,
      vmodel, "vmodel", "Parametric V model", $vmodel(h\; theta)$,
      upolicy, "upolicy", "Policy U function", $upolicy: hset times sset -> RR$,
      umodel, "umodel", "Parametric U model", $upolicy(h, s\; theta)$,
      apolicy, "apolicy", "Policy A function", $apolicy: hset times aset -> RR$,
      amodel, "amodel", "Parametric A model", $amodel(h, a\; theta)$,
    )
  ),
  (
    name: "Misc",
    commands: (
      $iter(k)$, "iter(k)", "Superscript indicating iteration", [action $a iter(i)$],
      $sim$, "sim", "Superscript indicating iteration", [action $a iter(i)$],
    ),
  ),
)

#align(center, {
  text(17pt)[
    abaisero.typ \ \
  ]
  text(13pt)[
    Andrea Baisero \
    March 29#super[th], 2023
  ]
})

= Commands

#for section in sections [
  == #section.name Commands

  #commandstable(section.commands)
]
